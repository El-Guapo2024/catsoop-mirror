[
  {
    "action": "set_parameters",
    "id": "89-1561130844864-6b336726a2c31f106bf69c315bffdc55",
    "parameters": {
      "assignees": [],
      "author": "adam j hartz <hz@mit.edu>",
      "body": "It would be great to have a more reliable way to use timing to measure efficiency of student solutions (as opposed to just using it to check for infinite loops).  Using a count of the number of opcodes executed during a particular run, while not perfect, would be likely to give us more finely-grained control over efficiency for scoring purposes. \r\n\r\nI think this is very doable.  I remembered this being hard in the past, but I was looking around the CPython source today for a way to hack this in, and it turns out that it is already available (new in version 3.7), via the usual [`sys.settrace`](https://docs.python.org/3/library/sys.html#sys.settrace) function.  Here is a minimal example that could be integrated into one or more of the Python sandboxes:\r\n\r\n```python\r\nimport sys\r\n\r\ndef trace_closure(verbose=False, limit=float('inf')):\r\n    executed_opcodes = 0\r\n\r\n    def tracer(frame, event, arg):\r\n        nonlocal executed_opcodes\r\n        frame.f_trace_opcodes = True\r\n        if event == 'opcode':\r\n            executed_opcodes += 1\r\n            if executed_opcodes > limit:\r\n                sys.exit(\"tracer: opcode limit reached\")\r\n            if verbose:\r\n                print(frame, event, arg)\r\n        return tracer\r\n\r\n    def get():\r\n        return executed_opcodes\r\n\r\n    names = {\r\n        'tracer': tracer,\r\n        'get': get,\r\n    }\r\n\r\n    return lambda n: names[n]\r\n\r\ntracer = trace_closure(verbose=True, limit=100000)\r\nsys.settrace(tracer('tracer'))\r\n\r\nimport sft\r\n\r\nsys.settrace(None)\r\nprint('_opcodes_executed=%d' % tracer('get')())\r\n```\n",
      "labels": [],
      "priority": 0,
      "target": null,
      "title": "Bytecode-based \"timing\" limits for python code"
    }
  },
  {
    "action": "add_comment",
    "author": "adam j hartz <hz@mit.edu>",
    "body": "Implemented in #46\n",
    "id": "90-1561130845553-15c519218fe637cd7ab61c8865c9b83a",
    "parent": null
  },
  {
    "action": "add_labels",
    "id": "91-1561130846257-e3c5fa9c099f6d5d08b2bea07da7e22d",
    "labels": [
      "question-type",
      "enhancement"
    ]
  },
  {
    "action": "close",
    "author": "adam j hartz <hz@mit.edu>",
    "id": "92-1561130846932-bce8deddd3f729e1cd15e1929e9177f9"
  }
]